package com.snda.youni.modules.selectfile;

import java.io.File;
import java.util.ArrayList;
import java.util.HashSet;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.net.Uri;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import com.snda.youni.R;
import com.snda.youni.modules.selectfile.QueueedWorkerThread.AsyncLoader;
import com.snda.youni.modules.selectfile.QueueedWorkerThread.Task;
import com.snda.youni.utils.ImageUtil;

public class FileAdapter extends BaseAdapter {

    private LayoutInflater mInflater;
    private int mIconFolder;
    private int mIconAudio;
    private int mIconVideo;
    private int mIconImage;
    private int mIconDocument;
    private int mIconFile;
    private int mIconApk;
    private Context mContext;
    private boolean mIsScrolling = false;
    private ArrayList<String> mItems;
    private int mLastPosition = 0;
    private IconCache mCache = new IconCache();
    private QueueedWorkerThread mWorkerThread = new QueueedWorkerThread(
            "icon-loader");
    private HashSet<String> mPendingLoad = new HashSet<String>();

    public FileAdapter(Context context, ArrayList<String> files) {
        mContext = context;
        mItems = files;
        mInflater = LayoutInflater.from(context);
        mIconFolder = R.drawable.file_icon_folder;
        mIconAudio = R.drawable.file_category_icon_audio;
        mIconVideo = R.drawable.file_category_icon_video;
        mIconFile = R.drawable.file_category_icon_document;
        mIconImage = R.drawable.file_category_icon_image;
        mIconDocument = R.drawable.file_category_icon_document;
        mIconApk = R.drawable.file_category_icon_apk;

        mWorkerThread.start();
    }

    @Override
    public int getCount() {
        return mItems.size();
    }

    @Override
    public Object getItem(int position) {
        return mItems.get(position);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    private void setupIcon(ViewHolder holder, File file) {
        holder.icon.setImageResource(mIconFile);
        if (mIsScrolling) {
            setupIconFast(holder, file);
        } else {
            setupIconSlow(holder, file);
        }
    }

    private void setupIconFast(ViewHolder holder, File file) {
        int type = FileUtils.getFileType(file);
        String key = file.getPath();
        Bitmap value = mCache.get(key);

        if (type == FileUtils.FILE_TYPE_AUDIO) {
            holder.icon.setImageResource(mIconAudio);
        } else if (type == FileUtils.FILE_TYPE_VIDEO) {
            holder.icon.setImageResource(mIconVideo);
        } else if (type == FileUtils.FILE_TYPE_DOCUMENT) {
            holder.icon.setImageResource(mIconDocument);
        } else if (type == FileUtils.FILE_TYPE_IMAGE) {
            if (value != null)
                holder.icon.setImageBitmap(value);
            else
                holder.icon.setImageResource(mIconImage);
        } else if (type == FileUtils.FILE_TYPE_APK) {
            if (value != null)
                holder.icon.setImageBitmap(value);
            else
                holder.icon.setImageResource(mIconApk);
        }
    }

    private void setupIconSlow(ViewHolder holder, File file) {
        int type = FileUtils.getFileType(file);
        String key = file.getPath();
        Bitmap value = mCache.get(file.getPath());

        if (type == FileUtils.FILE_TYPE_AUDIO) {
            holder.icon.setImageResource(mIconAudio);
        } else if (type == FileUtils.FILE_TYPE_VIDEO) {
            holder.icon.setImageResource(mIconVideo);
        } else if (type == FileUtils.FILE_TYPE_DOCUMENT) {
            holder.icon.setImageResource(mIconDocument);
        } else if (type == FileUtils.FILE_TYPE_IMAGE) {
            holder.icon.setImageResource(mIconImage);
            if (value != null)
                holder.icon.setImageBitmap(value);
            else {
                if (!mPendingLoad.contains(key)) {
                    Task task = new Task();
                    task.id = FileUtils.FILE_TYPE_IMAGE;
                    task.param = key;
                    task.loader = mIconLoader;
                    mWorkerThread.addTask(task);
                    mPendingLoad.add(key);
                }
            }
        } else if (type == FileUtils.FILE_TYPE_APK) {
            holder.icon.setImageResource(mIconApk);
            if (value != null)
                holder.icon.setImageBitmap(value);
            else {
                if (!mPendingLoad.contains(key)) {
                    Task task = new Task();
                    task.id = FileUtils.FILE_TYPE_APK;
                    task.param = key;
                    task.loader = mIconLoader;
                    mWorkerThread.addTask(task);
                    mPendingLoad.add(key);
                }
            }
        }
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        ViewHolder holder;

        if (convertView == null) {
            convertView = mInflater.inflate(R.layout.file_row, null);
            holder = new ViewHolder();
            holder.text = (TextView) convertView.findViewById(R.id.filetext);
            holder.size = (TextView) convertView.findViewById(R.id.filesize);
            holder.icon = (ImageView) convertView.findViewById(R.id.fileicon);
            convertView.setTag(holder);
        } else {
            holder = (ViewHolder) convertView.getTag();
        }

        String path = mItems.get(position);
        File file = new File(path);
        String name = file.getName();
        String size = FileUtils.getFileSize(file);
        holder.text.setText(name);
        holder.size.setText(size);
        holder.size.setVisibility(View.GONE);
        if (file.isDirectory()) {
            holder.icon.setImageResource(mIconFolder);
        } else {
            holder.size.setVisibility(View.VISIBLE);
            try {
                setupIcon(holder, file);
            } catch (OutOfMemoryError e) {
                mCache.clear();
                e.printStackTrace();
            }
        }
        return convertView;
    }

    public final class ViewHolder {
        public TextView text;
        public TextView size;
        public ImageView icon;
    }

    public void setIsScrolling(boolean isScrolling) {
        mIsScrolling = isScrolling;
        if (mIsScrolling) {
            mWorkerThread.clearTask();
            mPendingLoad.clear();
        }
    }

    public void setLastPosition(int lastPosition) {
        if (lastPosition >= 0 && lastPosition < mItems.size())
            this.mLastPosition = lastPosition;
    }

    public int getLastPosition() {
        return mLastPosition;
    }

    public void destroy() {
        if (mWorkerThread != null)
            mWorkerThread.destroySelf();
        if (mCache != null)
            mCache.clear();
    }

    private AsyncLoader mIconLoader = new AsyncLoader() {

        @Override
        public void load(Task task) {
            try {
                doLoad(task);
            } catch (OutOfMemoryError e) {
                mCache.clear();
                e.printStackTrace();
            }
        }

        private void doLoad(Task task) {
            final String path = (String) task.param;
            if (!new File(path).exists())
                return;
            final int id = task.id;
            Bitmap tmpBm = null;
            if (id == FileUtils.FILE_TYPE_APK)
                tmpBm = FileUtils.getUninstallAPKIcon(mContext, path);
            else if (id == FileUtils.FILE_TYPE_IMAGE)
                tmpBm = ImageUtil.loadBitmapWithSizeLimitation(mContext,
                        128 * 128, Uri.fromFile(new File(path)));
            final Bitmap bm = tmpBm;
            if (bm == null)
                return;

            if (mContext instanceof Activity) {
                ((Activity) mContext).runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        if (!mWorkerThread.isDestroyed()) {
                            mCache.set(path, bm);
                            notifyDataSetChanged();
                            mPendingLoad.remove(path);
                        } else {
                            bm.recycle();
                        }
                    }
                });
            }
        }

    };

}
