package com.snda.youni.modules.selectfile;

import java.util.concurrent.ConcurrentLinkedQueue;

import com.snda.youni.utils.LogUtil;

public class QueueedWorkerThread extends WorkerThread {

    public static final String TAG = QueueedWorkerThread.class.getSimpleName();

    public interface AsyncLoader {
        void load(Task task);
    }

    public static class Task {
        public int id;
        public Object param;
        public Object target;
        public AsyncLoader loader;
    }

    private ConcurrentLinkedQueue<Task> mTaskQueue = new ConcurrentLinkedQueue<Task>();

    public QueueedWorkerThread() {
        this("queueed-worker-thread");
    }

    public QueueedWorkerThread(String name) {
        super(name);
    }

    public void doJob() {
        Task task = mTaskQueue.poll();
        if (task == null) {
            pauseSelf();
        } else {
            doRealJob(task);
        }
    }

    private void doRealJob(Task task) {
        LogUtil.d(TAG, "task:" + task.param);
        AsyncLoader loader = task.loader;
        if (loader == null)
            return;
        try {
            loader.load(task);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void addTask(Task task) {
        if (task != null) {
            mTaskQueue.add(task);
        }
        if (isPaused()) {
            resumeSelf();
        }
    }

    public void clearTask() {
        LogUtil.d(TAG, mTaskQueue.size() + " task cleared.");
        mTaskQueue.clear();
    }

}
